// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OrbaOneSdk
import AVFoundation
import AVKit
import Alamofire
import Foundation
@_exported import OrbaOneSdk
import Swift
import UIKit
import Vision
@objc @_hasMissingDesignatedInitializers public class IntroViewController : UIKit.UIViewController, UIKit.UITableViewDelegate {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc dynamic public init()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension IntroViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_hasMissingDesignatedInitializers public class VideoGuideViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public class OrbaOneConfig {
  public init()
  public func setApiKey(_ key: Swift.String?) -> OrbaOneSdk.OrbaOneConfig
  public func setApplicantId(_ id: Swift.String?) -> OrbaOneSdk.OrbaOneConfig
  public func setFlow(_ steps: [OrbaOneSdk.Step]?) -> OrbaOneSdk.OrbaOneConfig
  public func build() -> OrbaOneSdk.BaseConfig
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class DocumentViewController : UIKit.UIViewController, UIKit.UITableViewDelegate {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc dynamic public init()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension DocumentViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@_hasMissingDesignatedInitializers public class FlowStep {
  public func setCurStep(_ position: Swift.Int)
  public func getCurStep() -> OrbaOneSdk.Step
  public func getNextStep() -> OrbaOneSdk.Step
  public func getPrevStep() -> OrbaOneSdk.Step
  public func reset()
  @objc deinit
}
public class OrbaOneFlow {
  public init(configuration cfg: OrbaOneSdk.BaseConfig) throws
  public func startVerification(origin view: UIKit.UIViewController, style presentationStyle: UIKit.UIModalPresentationStyle = .fullScreen) throws
  public func with(responseHandler completion: @escaping (OrbaOneSdk.Result<Swift.String, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum OrbaOneError : Swift.String, Swift.Error {
  case API_KEY_MISSING
  case API_KEY_INVALID
  case USER_INVALID
  case USER_CANCELLED
  case API_NOT_AVAILABLE
  case PAYLOAD_INVALID
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension CGFloat {
  public func pixelsToPoints() -> CoreGraphics.CGFloat
  public static func onePixelInPoints() -> CoreGraphics.CGFloat
}
public enum Result<Value, Error> where Error : Swift.Error {
  case success(Value)
  case failure(Error)
  case start
  case error(Error)
}
public struct BaseConfig {
}
public enum Step {
  case oval
  case voice
  case face
  case done
  case front
  case back
  case page
  case INTRO
  case ID
  case FACESCAN
  case UPLOAD
  case COMPLETE
  public static func == (a: OrbaOneSdk.Step, b: OrbaOneSdk.Step) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension OrbaOneSdk.OrbaOneError : Swift.Equatable {}
extension OrbaOneSdk.OrbaOneError : Swift.Hashable {}
extension OrbaOneSdk.OrbaOneError : Swift.RawRepresentable {}
extension OrbaOneSdk.Step : Swift.Equatable {}
extension OrbaOneSdk.Step : Swift.Hashable {}
